BOGUES
[ ] Une prévision peut avoir une icône de jour ET une de nuit selon la source, si une dit "sunny" et l'autre "clear" et estNuit == vrai. Mais c'est rare.
[x] EC a parfois des icônes avec orages alors que la condition dit seulement "Possibilité d'averses". Il faudrait peut-être ajuster la condition (Possibilité d'averses ou d'orages) si l'icône a un éclair, si le texte dit "orage" ou si les prévisions horaires incluent des possibilités d'orage.
[x] Les prévisions de la NOAA ne se retrouvent pas dans les prévisions stockées -> problème d'asynchronicité.
[ ] Les données de la NOAA sont parfois vieilles de plusieurs jours, sans doute un problème de cache.
[ ] EstNuit ne marche plus pour yr.no/horaire car on n'a pas de données de coucher/lever de soleil (elles sont importées dans les prévisions). Solution = importer les heures de lever/coucher pour le lieu? En fait ça ne marche pas pour EC/horaire non plus.
[ ] Pas sûr si ça vaut la peine, mais remplacer les doubleValue par double (etc.) pour avoir nil si l'importation ne marche pas? Dans les parseurs JSON de yr.no et la NOAA

IMPORTATION DES DONNÉES
[x] Trouver comment accéder aux données d'EC
[x] Créer des Prévisions à partir des données d'EC (XML)
[ ] Importer les données sur les avertissements et les veilles
[ ] Créer des Prévisions à partir du JSON de yr.no
  [x] Créer un parseur JSON
  [x] Parser les prévisions horaires
  [x] Parser les prévisions par jour
  [ ] Créer des identifiants pour obtenir les données en respectant les termes (HTML header)
  [-] Associer les informations reçues à celles utilisées par EC pour harmoniser
  [x] Créer des conditions spécifiques à yr.no
[x] Créer des Prévisions à partir de l'API de la NOAA
  [x] Clarifier la différence entre les différents services de données
  [x] Créer un parseur JSON
  [x] Ajouter les conditions dans l'enum (https://graphical.weather.gov/xml/xml_fields_icon_weather_conditions.php)
  [x] Parser les prévisions selon les instructions à https://weather-gov.github.io/api/general-faqs
    [x] Par jour
    [x] Horaires
  [x] Parser les observations récentes (ex. https://api.weather.gov/stations/KDCA/observations/latest)
[x] Créer des Prévisions à partir de l'API de OpenWeatherMap
  [ ] Ajouter les conditions dans l'enum
[ ] Faire de la recherche sur les sources de données :
  [x] Environnement Canada
  [x] Yr.no
  [ ] Météomédia / WeatherSource
  [x] NOAA
  [x] OpenWeatherMap
  [ ] Accuweather
  [ ] Foreca
  [ ] Met Office - https://metoffice.apiconnect.ibmcloud.com/metoffice/production/api
  [ ] Weather.io
  [.] Modèle SGPD du Canada - https://eccc-msc.github.io/open-data/msc-data/nwp_gdps/readme_gdps_fr/
  [?] Wetter.com
  [?] JMA
  [.] World Weather Online
  [ ] Météo-France
[x] Importer les données et les organiser par source et période
[x] Remplacer les String par des Dates pour les périodes
[ ] Présenter la vue des conditions actuelles seulement après avoir chargé les données initiales à l'ouverture
  [ ] Mettre une animation pour indiquer qu'on charge les données
[ ] Garder les données importées en cache
[ ] Réimporter automatiquement les données quand ça fait un certain temps (une heure? un délai d'expiration?)
[ ] Gérer l'échec de l'importation (ex. : en cas d'absence de connection internet)
[ ] Parser la température ressentie (humidex et refroidissement éolien)

AFFICHAGE DES DONNÉES (EN GÉNÉRAL)
[x] Afficher les bonnes conditions météo (plutôt que "Ensoleillé" partout)
[x] Afficher correctement les icônes de nuit vs. de jour
[ ] Afficher l'heure d'importation et d'émission

VUE DES CONDITIONS ACTUELLES
[x] Créer une CustomView pour les données des observations actuelles
[ ] Mieux disposer les données secondaires (vent, humidité, etc.) -> dans une Table View?
[ ] Afficher la source des données
[ ] Afficher le lieu d'observation (ex : aéroport)
[ ] Afficher les avertissements et veilles (de chaleur, d'orages, etc.)

VUE DE LA LISTE DE PRÉVISIONS
[x] Créer le TableView en suivant le modèle de l'app MealTracker
[ ] Placer les différentes données d'une Prévision dans une CustomCellView pour mettre dans le TableView
  [x] Afficher la source, l'icône, la température
  [ ] Choisir les autres variables à montrer : ressenti, prob de précipitation, vent, indice UV?
  [?] Peut-être permettre à l'utilisateur de choisir la variable à montrer?
[x] Créer une CollectionView pour les prévisions par période ainsi que le CustomCellView
[x] Ordonner les cellules du CollectionView selon la période (après conversion String -> Date)
[x] Créer une vue pour donner des détails lorsqu'on touche une prévision dans la liste
  [x] Implémenter les mécanismes de navigation du TableView pour entrer et sortir de cette vue
  [x] Afficher les données pertinentes, y compris le texte de la prévision s'il y a lieu
  [ ] Dans cette vue, permettre de passer d'une source à l'autre ET/OU d'une période à l'autre avec un geste du doigt
[x] Permettre de réordonner la table des prévisions par source
  [-] Recharger la collection view pour afficher les données de la première source
  [ ] Sauvegarder l'ordre choisi par l'utilisateur
[x] Afficher dans la collection view les prévisions de la source sélectionnée, s'il y en a une? (Plutôt que la première source par défaut)
  [x] Sélectionner à l'aide d'un geste spécial (toucher longtemps)
[ ] Choisir un gris pâle quand on sélectionne une cellule du table view
[ ] Faire persister la sélection du CollectionView et du TableView même quand on change la sélection de l'autre
[x] Permettre d'alterner entre les prévisions 7 jours et 24h avec un UISegmentedControl

PARAMÈTRES
[ ] Créer une table view pour les paramètres
[ ] Permettre de choisir les unités
  [ ] °C, °F
    [?] autres échelles comme K?
  [ ] km/h, m/s, mph, Beaufort, nœuds
  [ ] hPa, kPa, mmHg
[ ] Sauvegarder les paramètres choisis par l'utilisateur

GÉOGRAPHIE
[ ] Permettre de choisir un lieu
[ ] Faire un mapping entre les lieux choisis par l'utilisateurs et les lieux disponibles selon les sources
[ ] Utiliser la position de l'utilisateur pour déterminer le lieu

ÉLÉMENTS VISUELS
[x] Obtenir/colorer les icônes pour toutes les conditions météo
  [x] Conditions actuelles
  [x] Conditions utilisées dans les prévisions
  [x] Icônes supplémentaires nécessaires à yr.no
  [x] Icônes pour les conditions Hot et Cold de la NOAA
[x] Afficher les icônes aux bons endroits
[ ] Expérimenter et choisir différentes tailles et dispositions pour les icônes
[ ] Choisir les polices
[ ] Choisir une couleur dominante et la mettre sur les éléments interactifs pertinents
[ ] Créer une icône d'app
  [-] Modifier l'icône d'app selon les conditions actuelles
[ ] Créer des icônes pour la barre d'onglets en bas
[ ] Mode sombre

FUN STUFF
[.] Inventer une liste d'achievements
[.] Coder la page des achievements
[.] Créer une page de statistiques (nombre de jours ensoleillés vécus par l'utilisateur, etc.)

LOCALISATION
[ ] Avoir une version française et anglaise pour toutes les chaines de l'app
[ ] Afficher les heures correctement selon la locale

MONÉTISATION
[ ] Créer un modèle d'abonnement pour utiliser les API payantes

DÉPLOIEMENT
[ ] Acheter un ordinateur qui peut rouler les derniers systèmes d'exploitation
[ ] S'inscrire au Apple Developer Program
[ ] Déployer sur TestFlight
[ ] Soumettre au Apple Store


Légende
[ ] == à faire
[x] == fait
[?] == optionnel
[-] == abandonné
[.] == à faire, mais pas pour la v1 (Minimum Viable Product)
